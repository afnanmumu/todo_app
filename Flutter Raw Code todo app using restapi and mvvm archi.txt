main.dart
import 'package:flutter/material.dart';
import 'package:todo_app/screens/todo_list_screen.dart';
void main() {
  runApp(MyApp());
}
class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      theme: ThemeData.dark(),
      home: TodoListScreen(),
    );
  }
}

screens/todo_list_screen.dart
import 'dart:convert';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

class AddTodoPage extends StatefulWidget {
  final Map? todo;
  const AddTodoPage({
    super.key,
    this.todo,
  });

  @override
  State<AddTodoPage> createState() => _AddTodoPageState();
}

class _AddTodoPageState extends State<AddTodoPage> {
  TextEditingController titleController = TextEditingController();
  TextEditingController descriptionController = TextEditingController();

  bool isEdit = false;

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    final todo = widget.todo;
    if(todo != null){
      isEdit = true;
      final title = todo['title'];
      final description = todo['description'];
      titleController.text = title;
      descriptionController.text = description;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(isEdit ? "Edit Todo":"Add Todo"),
      ),
      body: ListView(
        padding: EdgeInsets.all(20),
        children: [
          TextField(
            controller: titleController,
            decoration: InputDecoration(hintText: 'Title'),
          ),
          SizedBox(height: 20,),
          TextField(
            controller: descriptionController,
            decoration: InputDecoration(hintText: 'Description'),
            keyboardType: TextInputType.multiline,
            minLines: 5,
            maxLines: 8,
          ),
          SizedBox(height: 20,),
          ElevatedButton(onPressed: isEdit ? editData : submitData, child: Text(isEdit ? "Update":"Submit"))
        ],
      ),
    );
  }
  Future<void> submitData() async {
    // Get data from form
    final title = titleController.text;
    final description = descriptionController.text;
    final body = {
      'title' : title,
      'description' : description,
      'is_completed' : false,
    };
    // Submit data to the server
    final url = 'https://api.nstack.in/v1/todos';
    final uri = Uri.parse(url);
    final response = await http.post(
        uri,
        body: jsonEncode(body),
      headers: {
          'Content-Type': 'application/json'
      }
    );
    // Show sucess or fail
    if(response.statusCode == 201){
      titleController.text = '';
      descriptionController.text = '';
      print('Success');
      showSuccessMessage('success');
    }
    else{
      print('Error');
      print(response.body);
      showSuccessMessage('Failure');
    }
  }
  void showSuccessMessage(String msg){
    final snackBar = SnackBar(content: Text(msg));
    ScaffoldMessenger.of(context).showSnackBar(snackBar);
  }
  Future<void> editData() async {
    // Get data
    final todo = widget.todo;
    if(todo == null){
      print('you cannot update without data');
      return ;
    }
    final id = todo['_id'];
    final title = titleController.text;
    final description = descriptionController.text;
    final body = {
      'title' : title,
      'description' : description,
      'is_completed' : false,
    };
    // Submit Update data
    final url = 'https://api.nstack.in/v1/todos/$id';
    final uri = Uri.parse(url);
    final response = await http.put(
        uri,
        body: jsonEncode(body),
        headers: {
          'Content-Type': 'application/json'
        }
    );
    if(response.statusCode == 200){
      showSuccessMessage('Update Successfully');
    } else {
      showSuccessMessage('Update Failed');
    }
  }
}

screens/add_todo_page.dart
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:todo_app/screens/add_todo_page.dart';
import 'package:http/http.dart' as http;
class TodoListScreen extends StatefulWidget {
  const TodoListScreen({super.key});
  @override
  State<TodoListScreen> createState() => _TodoListScreenState();
}
class _TodoListScreenState extends State<TodoListScreen> {
  List items = [];
  bool is_loading = false;
  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    fetchData();
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Todo List App'),
      ),
      body: Visibility(
        visible: is_loading,
        replacement: Center(child: CircularProgressIndicator(),),
        child: RefreshIndicator(
          onRefresh: fetchData,
          child: Visibility(
            visible: items.isNotEmpty,
            replacement: Center(child: Text('No Todo item'),),
            child: ListView.builder(
              itemCount: items.length,
                itemBuilder: (context,index){
                final item = items[index] as Map;
                final id = item['_id'] as String;
                return ListTile(
                  leading: CircleAvatar(child: Text('${index+1}')),
                  title: Text(item['title']),
                  subtitle: Text(item['description']),
                  trailing: PopupMenuButton(
                    onSelected: (value){
                      if(value == 'edit'){
                        navigateToEditPage(item);
                      } else if(value == 'delete'){
                        deleteByID(id);
                      }
                    },
                    itemBuilder: (context){
                      return [
                        PopupMenuItem(
                        child: Text('Edit'),
                        value: 'edit',
                        ),
                        PopupMenuItem(
                          child: Text('Delete'),
                          value: 'delete',
                        ),
                      ];
                    },
                  ),
                );
            }),
          ),
        ),
      ),
      floatingActionButton: FloatingActionButton.extended(onPressed: navigateToAddPage, label: Text('Add Todo')),
    );
  }
  Future<void> navigateToEditPage(Map item) async {
    final route = MaterialPageRoute(builder: (context) => AddTodoPage(todo: item),);
    await Navigator.push(context, route);
    setState(() {
      is_loading = true;
    });
    fetchData();
  }
  Future<void> navigateToAddPage() async {
    final route = MaterialPageRoute(builder: (context) => AddTodoPage(),);
    await Navigator.push(context, route);
    setState(() {
      is_loading = true;
    });
    fetchData();
  }
  Future<void> deleteByID(String id) async {
    // Delete the item
    final url = 'https://api.nstack.in/v1/todos/$id';
    final uri = Uri.parse(url);
    final response = await http.delete(uri);
    if(response.statusCode == 200){
      // Remove the item from list
      final filtered = items.where((element) => element['_id']!=id ).toList();
      setState(() {
        items = filtered;
      });
      print('Successfully Deleted');
    }
    else{
      print('Error deleting');
    }
  }
  Future<void> fetchData() async {
    final url = 'https://api.nstack.in/v1/todos?page=1&limit=20';
    final uri = Uri.parse(url);
    final response = await http.get(uri);
    if(response.statusCode == 200){
      final json = jsonDecode(response.body) as Map;
      final result = json['items'] as List;
      setState(() {
        items = result;
      });
    }
    else{
      print('error');
      print(response.statusCode);
    }
    setState(() {
      is_loading = true;
    });
  }
}

from the above 3 page code given just arrange it in mvvm architecture without changing any logic